# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

# All files
[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true

# Code files
[*.{cs,csx,vb,vbx}]
indent_style = space
indent_size = 4

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_style = space
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_style = space
indent_size = 2

# JSON files
[*.json]
indent_style = space
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_style = space
indent_size = 2

# Markdown files
[*.md]
trim_trailing_whitespace = false

# C# files
[*.cs]

# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# Wrapping preferences
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

# Code style rules
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion
dotnet_style_readonly_field = true:suggestion

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent

# C# expression-level preferences
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# C# expression-bodied members
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent

# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Null-checking preferences
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# Code quality rules
dotnet_analyzer_diagnostic.category-security.severity = error
dotnet_analyzer_diagnostic.category-reliability.severity = error
dotnet_analyzer_diagnostic.category-performance.severity = warning

# Code analysis rules
dotnet_diagnostic.CA1001.severity = error  # Types that own disposable fields should be disposable
dotnet_diagnostic.CA1009.severity = error  # Declare event handlers correctly
dotnet_diagnostic.CA1016.severity = error  # Mark assemblies with assembly version
dotnet_diagnostic.CA1033.severity = error  # Interface methods should be callable by child types
dotnet_diagnostic.CA1049.severity = error  # Types that own native resources should be disposable
dotnet_diagnostic.CA1060.severity = error  # Move pinvokes to native methods class
dotnet_diagnostic.CA1061.severity = error  # Do not hide base class methods
dotnet_diagnostic.CA1063.severity = error  # Implement IDisposable Correctly
dotnet_diagnostic.CA1065.severity = error  # Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1301.severity = error  # Avoid duplicate accelerators
dotnet_diagnostic.CA1400.severity = error  # P/Invoke entry points should exist
dotnet_diagnostic.CA1401.severity = error  # P/Invokes should not be visible
dotnet_diagnostic.CA1403.severity = error  # Auto layout types should not be COM visible
dotnet_diagnostic.CA1404.severity = error  # Call GetLastError immediately after P/Invoke
dotnet_diagnostic.CA1405.severity = error  # COM visible type base types should be COM visible
dotnet_diagnostic.CA1410.severity = error  # COM registration methods should be matched
dotnet_diagnostic.CA1415.severity = error  # Declare P/Invokes correctly
dotnet_diagnostic.CA1821.severity = error  # Remove empty Finalizers
dotnet_diagnostic.CA1900.severity = error  # Value type fields should be portable
dotnet_diagnostic.CA1901.severity = error  # P/Invoke declarations should be portable
dotnet_diagnostic.CA2002.severity = error  # Do not lock on objects with weak identity
dotnet_diagnostic.CA2100.severity = error  # Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2101.severity = error  # Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2108.severity = error  # Review declarative security on value types
dotnet_diagnostic.CA2111.severity = error  # Pointers should not be visible
dotnet_diagnostic.CA2112.severity = error  # Secured types should not expose fields
dotnet_diagnostic.CA2114.severity = error  # Method security should be a superset of type
dotnet_diagnostic.CA2116.severity = error  # APTCA methods should only call APTCA methods
dotnet_diagnostic.CA2117.severity = error  # APTCA types should only extend APTCA base types
dotnet_diagnostic.CA2122.severity = error  # Do not indirectly expose methods with link demands
dotnet_diagnostic.CA2123.severity = error  # Override link demands should be identical to base
dotnet_diagnostic.CA2124.severity = error  # Wrap vulnerable finally clauses in outer try
dotnet_diagnostic.CA2126.severity = error  # Type link demands require inheritance demands
dotnet_diagnostic.CA2131.severity = error  # Security critical types may not participate in type equivalence
dotnet_diagnostic.CA2132.severity = error  # Default constructors must be at least as critical as base type default constructors
dotnet_diagnostic.CA2133.severity = error  # Delegates must bind to methods with consistent transparency
dotnet_diagnostic.CA2134.severity = error  # Methods must keep consistent transparency when overriding base methods
dotnet_diagnostic.CA2137.severity = error  # Transparent methods must contain only verifiable IL
dotnet_diagnostic.CA2138.severity = error  # Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute
dotnet_diagnostic.CA2140.severity = error  # Transparent code must not reference security critical items
dotnet_diagnostic.CA2141.severity = error  # Transparent methods must not satisfy LinkDemands
dotnet_diagnostic.CA2146.severity = error  # Types must be at least as critical as their base types and interfaces
dotnet_diagnostic.CA2147.severity = error  # Transparent methods may not use security asserts
dotnet_diagnostic.CA2149.severity = error  # Transparent methods must not call into native code
dotnet_diagnostic.CA2200.severity = error  # Rethrow to preserve stack details
dotnet_diagnostic.CA2202.severity = error  # Do not dispose objects multiple times
dotnet_diagnostic.CA2207.severity = error  # Initialize value type static fields inline
dotnet_diagnostic.CA2212.severity = error  # Do not mark serviced components with WebMethod
dotnet_diagnostic.CA2213.severity = error  # Disposable fields should be disposed
dotnet_diagnostic.CA2214.severity = error  # Do not call overridable methods in constructors
dotnet_diagnostic.CA2216.severity = error  # Disposable types should declare finalizer
dotnet_diagnostic.CA2220.severity = error  # Finalizers should call base class finalizer
dotnet_diagnostic.CA2229.severity = error  # Implement serialization constructors
dotnet_diagnostic.CA2231.severity = error  # Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2232.severity = error  # Mark Windows Forms entry points with STAThread
dotnet_diagnostic.CA2235.severity = error  # Mark all non-serializable fields
dotnet_diagnostic.CA2236.severity = error  # Call base class methods on ISerializable types
dotnet_diagnostic.CA2237.severity = error  # Mark ISerializable types with serializable
dotnet_diagnostic.CA2238.severity = error  # Implement serialization methods correctly
dotnet_diagnostic.CA2240.severity = error  # Implement ISerializable correctly
dotnet_diagnostic.CA2241.severity = error  # Provide correct arguments to formatting methods
dotnet_diagnostic.CA2242.severity = error  # Test for NaN correctly